grammar org.xtext.tl.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/tl/mydsl/MyDsl"

Model:
	(model += function LC?)*;

function:
	'function' LC funName=SYMBOLES ':' LC def=Definiton
;

Definiton:
	'read' LC inputVars=Input LC
	'%' commandList=Commands LC
	'%' 'write' LC outputVars=Output
;

Input: VARIABLE (',' LC? VARIABLE)*;
Output: VARIABLE (',' LC? VARIABLE)*;
Commands: c+=Command (';' LC? c+=Command)* ;
Vars: VARIABLE (',' Vars)? ;
Exprs: Expr (',' exp=Exprs)? ;

Command: {Command}
	'nop' |
	varL=Vars LC? ':=' LC? expL=Exprs |
	nom='while'   LC exp=Expr LC 'do'   LC c1=Commands LC 'od' |
	nom='for'     LC exp=Expr LC 'do'   LC c1=Commands LC 'od' |
	nom='foreach' LC exp1=Expr LC 'in'   LC exp2=Expr LC 'do' LC c1=Commands LC 'od'|
	nom='if'      LC exp=Expr LC 'then' LC c1=Commands LC ('else' LC c2=Commands LC)? 'fi'
;

Expr:
	exprSimple=ExprSimple |
	expEt=And |
	expTerminale=ExprTerm
;

And:
	expOu=Or (LC 'and' LC expOu2+=Or)*
	//Ou += Or (LC 'and' LC Or) *
;

Or:
	expNon=Not (LC 'or' LC expNon2+=Not)*
;

Not:
	(non+='not' LC)* expEq=Eq
;

Eq:
	(exprEq1= (ExprSimple|ExprTerm)) LC? '=?' LC? (exprEq2= (ExprSimple|ExprTerm)) |
	'('(exp= (ExprTerm|ExprSimple))')'
;

ExprTerm:
	ExprTerm=('nil' | VARIABLE | SYMBOLES)
;

ExprSimple:
	'('(
	 	((mot=('cons'|'list')) lexpr=Lexpr) |
		((mot=('hd' | 'tl')) LC expr=Expr)
	)')'
;

Lexpr:
	(LC exp+=Expr)+
;

terminal VARIABLE:
	('A'..'Z')(('a'..'z')|('0'..'9')|('A'..'Z'))*
;

terminal SYMBOLES:
	('a'..'z')(('a'..'z')|('0'..'9')|('A'..'Z'))*
;

terminal LC:
	(' '|'\n'|'\t')+
;