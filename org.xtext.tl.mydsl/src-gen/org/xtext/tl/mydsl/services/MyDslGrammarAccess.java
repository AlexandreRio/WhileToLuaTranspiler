/*
* generated by Xtext
*/
package org.xtext.tl.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelFunctionParserRuleCall_0_0 = (RuleCall)cModelAssignment_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Model:
		//	(model+=function LC?)*;
		public ParserRule getRule() { return rule; }

		//(model+=function LC?)*
		public Group getGroup() { return cGroup; }

		//model+=function
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }

		//function
		public RuleCall getModelFunctionParserRuleCall_0_0() { return cModelFunctionParserRuleCall_0_0; }

		//LC?
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFunNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunNameSYMBOLESTerminalRuleCall_2_0 = (RuleCall)cFunNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLCTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefDefinitonParserRuleCall_5_0 = (RuleCall)cDefAssignment_5.eContents().get(0);
		
		//function:
		//	"function" LC funName=SYMBOLES ":" LC def=Definiton;
		public ParserRule getRule() { return rule; }

		//"function" LC funName=SYMBOLES ":" LC def=Definiton
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }

		//funName=SYMBOLES
		public Assignment getFunNameAssignment_2() { return cFunNameAssignment_2; }

		//SYMBOLES
		public RuleCall getFunNameSYMBOLESTerminalRuleCall_2_0() { return cFunNameSYMBOLESTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//LC
		public RuleCall getLCTerminalRuleCall_4() { return cLCTerminalRuleCall_4; }

		//def=Definiton
		public Assignment getDefAssignment_5() { return cDefAssignment_5; }

		//Definiton
		public RuleCall getDefDefinitonParserRuleCall_5_0() { return cDefDefinitonParserRuleCall_5_0; }
	}

	public class DefinitonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definiton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInputVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputVarsInputParserRuleCall_2_0 = (RuleCall)cInputVarsAssignment_2.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommandListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandListCommandsParserRuleCall_5_0 = (RuleCall)cCommandListAssignment_5.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cPercentSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cWriteKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cOutputVarsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOutputVarsOutputParserRuleCall_10_0 = (RuleCall)cOutputVarsAssignment_10.eContents().get(0);
		
		//Definiton:
		//	"read" LC inputVars=Input LC "%" commandList=Commands LC "%" "write" LC outputVars=Output;
		public ParserRule getRule() { return rule; }

		//"read" LC inputVars=Input LC "%" commandList=Commands LC "%" "write" LC outputVars=Output
		public Group getGroup() { return cGroup; }

		//"read"
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }

		//inputVars=Input
		public Assignment getInputVarsAssignment_2() { return cInputVarsAssignment_2; }

		//Input
		public RuleCall getInputVarsInputParserRuleCall_2_0() { return cInputVarsInputParserRuleCall_2_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_3() { return cLCTerminalRuleCall_3; }

		//"%"
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }

		//commandList=Commands
		public Assignment getCommandListAssignment_5() { return cCommandListAssignment_5; }

		//Commands
		public RuleCall getCommandListCommandsParserRuleCall_5_0() { return cCommandListCommandsParserRuleCall_5_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_6() { return cLCTerminalRuleCall_6; }

		//"%"
		public Keyword getPercentSignKeyword_7() { return cPercentSignKeyword_7; }

		//"write"
		public Keyword getWriteKeyword_8() { return cWriteKeyword_8; }

		//LC
		public RuleCall getLCTerminalRuleCall_9() { return cLCTerminalRuleCall_9; }

		//outputVars=Output
		public Assignment getOutputVarsAssignment_10() { return cOutputVarsAssignment_10; }

		//Output
		public RuleCall getOutputVarsOutputParserRuleCall_10_0() { return cOutputVarsOutputParserRuleCall_10_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Input:
		//	VARIABLE ("," LC? VARIABLE)*;
		public ParserRule getRule() { return rule; }

		//VARIABLE ("," LC? VARIABLE)*
		public Group getGroup() { return cGroup; }

		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }

		//("," LC? VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//LC?
		public RuleCall getLCTerminalRuleCall_1_1() { return cLCTerminalRuleCall_1_1; }

		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_2() { return cVARIABLETerminalRuleCall_1_2; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Output:
		//	VARIABLE ("," LC? VARIABLE)*;
		public ParserRule getRule() { return rule; }

		//VARIABLE ("," LC? VARIABLE)*
		public Group getGroup() { return cGroup; }

		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }

		//("," LC? VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//LC?
		public RuleCall getLCTerminalRuleCall_1_1() { return cLCTerminalRuleCall_1_1; }

		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_2() { return cVARIABLETerminalRuleCall_1_2; }
	}

	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCCommandParserRuleCall_0_0 = (RuleCall)cCAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cCAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCCommandParserRuleCall_1_2_0 = (RuleCall)cCAssignment_1_2.eContents().get(0);
		
		//Commands:
		//	c+=Command (";" LC? c+=Command)*;
		public ParserRule getRule() { return rule; }

		//c+=Command (";" LC? c+=Command)*
		public Group getGroup() { return cGroup; }

		//c+=Command
		public Assignment getCAssignment_0() { return cCAssignment_0; }

		//Command
		public RuleCall getCCommandParserRuleCall_0_0() { return cCCommandParserRuleCall_0_0; }

		//(";" LC? c+=Command)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//LC?
		public RuleCall getLCTerminalRuleCall_1_1() { return cLCTerminalRuleCall_1_1; }

		//c+=Command
		public Assignment getCAssignment_1_2() { return cCAssignment_1_2; }

		//Command
		public RuleCall getCCommandParserRuleCall_1_2_0() { return cCCommandParserRuleCall_1_2_0; }
	}

	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVarsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Vars:
		//	VARIABLE ("," Vars)?;
		public ParserRule getRule() { return rule; }

		//VARIABLE ("," Vars)?
		public Group getGroup() { return cGroup; }

		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }

		//("," Vars)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//Vars
		public RuleCall getVarsParserRuleCall_1_1() { return cVarsParserRuleCall_1_1; }
	}

	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Exprs:
		//	Expr ("," Exprs)?;
		public ParserRule getRule() { return rule; }

		//Expr ("," Exprs)?
		public Group getGroup() { return cGroup; }

		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }

		//("," Exprs)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//Exprs
		public RuleCall getExprsParserRuleCall_1_1() { return cExprsParserRuleCall_1_1; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVarLAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarLVarsParserRuleCall_1_0_0 = (RuleCall)cVarLAssignment_1_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cLCTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cExpLAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExpLExprsParserRuleCall_1_4_0 = (RuleCall)cExpLAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNomAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNomWhileKeyword_2_0_0 = (Keyword)cNomAssignment_2_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cExpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpExprParserRuleCall_2_2_0 = (RuleCall)cExpAssignment_2_2.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cDoKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final Assignment cC1Assignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cC1CommandsParserRuleCall_2_6_0 = (RuleCall)cC1Assignment_2_6.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_2_7 = (RuleCall)cGroup_2.eContents().get(7);
		private final Keyword cOdKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNomAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cNomForKeyword_3_0_0 = (Keyword)cNomAssignment_3_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cExpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpExprParserRuleCall_3_2_0 = (RuleCall)cExpAssignment_3_2.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Keyword cDoKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_3_5 = (RuleCall)cGroup_3.eContents().get(5);
		private final Assignment cC1Assignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cC1CommandsParserRuleCall_3_6_0 = (RuleCall)cC1Assignment_3_6.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_3_7 = (RuleCall)cGroup_3.eContents().get(7);
		private final Keyword cOdKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNomAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cNomForeachKeyword_4_0_0 = (Keyword)cNomAssignment_4_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cExp1Assignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExp1ExprParserRuleCall_4_2_0 = (RuleCall)cExp1Assignment_4_2.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Keyword cInKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_4_5 = (RuleCall)cGroup_4.eContents().get(5);
		private final Assignment cExp2Assignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cExp2ExprParserRuleCall_4_6_0 = (RuleCall)cExp2Assignment_4_6.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_4_7 = (RuleCall)cGroup_4.eContents().get(7);
		private final Keyword cDoKeyword_4_8 = (Keyword)cGroup_4.eContents().get(8);
		private final RuleCall cLCTerminalRuleCall_4_9 = (RuleCall)cGroup_4.eContents().get(9);
		private final Assignment cC1Assignment_4_10 = (Assignment)cGroup_4.eContents().get(10);
		private final RuleCall cC1CommandsParserRuleCall_4_10_0 = (RuleCall)cC1Assignment_4_10.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_4_11 = (RuleCall)cGroup_4.eContents().get(11);
		private final Keyword cOdKeyword_4_12 = (Keyword)cGroup_4.eContents().get(12);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNomAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cNomIfKeyword_5_0_0 = (Keyword)cNomAssignment_5_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cExpAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpExprParserRuleCall_5_2_0 = (RuleCall)cExpAssignment_5_2.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Keyword cThenKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_5_5 = (RuleCall)cGroup_5.eContents().get(5);
		private final Assignment cC1Assignment_5_6 = (Assignment)cGroup_5.eContents().get(6);
		private final RuleCall cC1CommandsParserRuleCall_5_6_0 = (RuleCall)cC1Assignment_5_6.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_5_7 = (RuleCall)cGroup_5.eContents().get(7);
		private final Group cGroup_5_8 = (Group)cGroup_5.eContents().get(8);
		private final Keyword cElseKeyword_5_8_0 = (Keyword)cGroup_5_8.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_5_8_1 = (RuleCall)cGroup_5_8.eContents().get(1);
		private final Assignment cC2Assignment_5_8_2 = (Assignment)cGroup_5_8.eContents().get(2);
		private final RuleCall cC2CommandsParserRuleCall_5_8_2_0 = (RuleCall)cC2Assignment_5_8_2.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_5_8_3 = (RuleCall)cGroup_5_8.eContents().get(3);
		private final Keyword cFiKeyword_5_9 = (Keyword)cGroup_5.eContents().get(9);
		
		//Command:
		//	{Command} "nop" | varL=Vars LC? ":=" LC? expL=Exprs | nom="while" LC exp=Expr LC "do" LC c1=Commands LC "od" |
		//	nom="for" LC exp=Expr LC "do" LC c1=Commands LC "od" | nom="foreach" LC exp1=Expr LC "in" LC exp2=Expr LC "do" LC
		//	c1=Commands LC "od" | nom="if" LC exp=Expr LC "then" LC c1=Commands LC ("else" LC c2=Commands LC)? "fi";
		public ParserRule getRule() { return rule; }

		//{Command} "nop" | varL=Vars LC? ":=" LC? expL=Exprs | nom="while" LC exp=Expr LC "do" LC c1=Commands LC "od" | nom="for"
		//LC exp=Expr LC "do" LC c1=Commands LC "od" | nom="foreach" LC exp1=Expr LC "in" LC exp2=Expr LC "do" LC c1=Commands LC
		//"od" | nom="if" LC exp=Expr LC "then" LC c1=Commands LC ("else" LC c2=Commands LC)? "fi"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Command} "nop"
		public Group getGroup_0() { return cGroup_0; }

		//{Command}
		public Action getCommandAction_0_0() { return cCommandAction_0_0; }

		//"nop"
		public Keyword getNopKeyword_0_1() { return cNopKeyword_0_1; }

		//varL=Vars LC? ":=" LC? expL=Exprs
		public Group getGroup_1() { return cGroup_1; }

		//varL=Vars
		public Assignment getVarLAssignment_1_0() { return cVarLAssignment_1_0; }

		//Vars
		public RuleCall getVarLVarsParserRuleCall_1_0_0() { return cVarLVarsParserRuleCall_1_0_0; }

		//LC?
		public RuleCall getLCTerminalRuleCall_1_1() { return cLCTerminalRuleCall_1_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }

		//LC?
		public RuleCall getLCTerminalRuleCall_1_3() { return cLCTerminalRuleCall_1_3; }

		//expL=Exprs
		public Assignment getExpLAssignment_1_4() { return cExpLAssignment_1_4; }

		//Exprs
		public RuleCall getExpLExprsParserRuleCall_1_4_0() { return cExpLExprsParserRuleCall_1_4_0; }

		//nom="while" LC exp=Expr LC "do" LC c1=Commands LC "od"
		public Group getGroup_2() { return cGroup_2; }

		//nom="while"
		public Assignment getNomAssignment_2_0() { return cNomAssignment_2_0; }

		//"while"
		public Keyword getNomWhileKeyword_2_0_0() { return cNomWhileKeyword_2_0_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_2_1() { return cLCTerminalRuleCall_2_1; }

		//exp=Expr
		public Assignment getExpAssignment_2_2() { return cExpAssignment_2_2; }

		//Expr
		public RuleCall getExpExprParserRuleCall_2_2_0() { return cExpExprParserRuleCall_2_2_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_2_3() { return cLCTerminalRuleCall_2_3; }

		//"do"
		public Keyword getDoKeyword_2_4() { return cDoKeyword_2_4; }

		//LC
		public RuleCall getLCTerminalRuleCall_2_5() { return cLCTerminalRuleCall_2_5; }

		//c1=Commands
		public Assignment getC1Assignment_2_6() { return cC1Assignment_2_6; }

		//Commands
		public RuleCall getC1CommandsParserRuleCall_2_6_0() { return cC1CommandsParserRuleCall_2_6_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_2_7() { return cLCTerminalRuleCall_2_7; }

		//"od"
		public Keyword getOdKeyword_2_8() { return cOdKeyword_2_8; }

		//nom="for" LC exp=Expr LC "do" LC c1=Commands LC "od"
		public Group getGroup_3() { return cGroup_3; }

		//nom="for"
		public Assignment getNomAssignment_3_0() { return cNomAssignment_3_0; }

		//"for"
		public Keyword getNomForKeyword_3_0_0() { return cNomForKeyword_3_0_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_3_1() { return cLCTerminalRuleCall_3_1; }

		//exp=Expr
		public Assignment getExpAssignment_3_2() { return cExpAssignment_3_2; }

		//Expr
		public RuleCall getExpExprParserRuleCall_3_2_0() { return cExpExprParserRuleCall_3_2_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_3_3() { return cLCTerminalRuleCall_3_3; }

		//"do"
		public Keyword getDoKeyword_3_4() { return cDoKeyword_3_4; }

		//LC
		public RuleCall getLCTerminalRuleCall_3_5() { return cLCTerminalRuleCall_3_5; }

		//c1=Commands
		public Assignment getC1Assignment_3_6() { return cC1Assignment_3_6; }

		//Commands
		public RuleCall getC1CommandsParserRuleCall_3_6_0() { return cC1CommandsParserRuleCall_3_6_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_3_7() { return cLCTerminalRuleCall_3_7; }

		//"od"
		public Keyword getOdKeyword_3_8() { return cOdKeyword_3_8; }

		//nom="foreach" LC exp1=Expr LC "in" LC exp2=Expr LC "do" LC c1=Commands LC "od"
		public Group getGroup_4() { return cGroup_4; }

		//nom="foreach"
		public Assignment getNomAssignment_4_0() { return cNomAssignment_4_0; }

		//"foreach"
		public Keyword getNomForeachKeyword_4_0_0() { return cNomForeachKeyword_4_0_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_4_1() { return cLCTerminalRuleCall_4_1; }

		//exp1=Expr
		public Assignment getExp1Assignment_4_2() { return cExp1Assignment_4_2; }

		//Expr
		public RuleCall getExp1ExprParserRuleCall_4_2_0() { return cExp1ExprParserRuleCall_4_2_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_4_3() { return cLCTerminalRuleCall_4_3; }

		//"in"
		public Keyword getInKeyword_4_4() { return cInKeyword_4_4; }

		//LC
		public RuleCall getLCTerminalRuleCall_4_5() { return cLCTerminalRuleCall_4_5; }

		//exp2=Expr
		public Assignment getExp2Assignment_4_6() { return cExp2Assignment_4_6; }

		//Expr
		public RuleCall getExp2ExprParserRuleCall_4_6_0() { return cExp2ExprParserRuleCall_4_6_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_4_7() { return cLCTerminalRuleCall_4_7; }

		//"do"
		public Keyword getDoKeyword_4_8() { return cDoKeyword_4_8; }

		//LC
		public RuleCall getLCTerminalRuleCall_4_9() { return cLCTerminalRuleCall_4_9; }

		//c1=Commands
		public Assignment getC1Assignment_4_10() { return cC1Assignment_4_10; }

		//Commands
		public RuleCall getC1CommandsParserRuleCall_4_10_0() { return cC1CommandsParserRuleCall_4_10_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_4_11() { return cLCTerminalRuleCall_4_11; }

		//"od"
		public Keyword getOdKeyword_4_12() { return cOdKeyword_4_12; }

		//nom="if" LC exp=Expr LC "then" LC c1=Commands LC ("else" LC c2=Commands LC)? "fi"
		public Group getGroup_5() { return cGroup_5; }

		//nom="if"
		public Assignment getNomAssignment_5_0() { return cNomAssignment_5_0; }

		//"if"
		public Keyword getNomIfKeyword_5_0_0() { return cNomIfKeyword_5_0_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_5_1() { return cLCTerminalRuleCall_5_1; }

		//exp=Expr
		public Assignment getExpAssignment_5_2() { return cExpAssignment_5_2; }

		//Expr
		public RuleCall getExpExprParserRuleCall_5_2_0() { return cExpExprParserRuleCall_5_2_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_5_3() { return cLCTerminalRuleCall_5_3; }

		//"then"
		public Keyword getThenKeyword_5_4() { return cThenKeyword_5_4; }

		//LC
		public RuleCall getLCTerminalRuleCall_5_5() { return cLCTerminalRuleCall_5_5; }

		//c1=Commands
		public Assignment getC1Assignment_5_6() { return cC1Assignment_5_6; }

		//Commands
		public RuleCall getC1CommandsParserRuleCall_5_6_0() { return cC1CommandsParserRuleCall_5_6_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_5_7() { return cLCTerminalRuleCall_5_7; }

		//("else" LC c2=Commands LC)?
		public Group getGroup_5_8() { return cGroup_5_8; }

		//"else"
		public Keyword getElseKeyword_5_8_0() { return cElseKeyword_5_8_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_5_8_1() { return cLCTerminalRuleCall_5_8_1; }

		//c2=Commands
		public Assignment getC2Assignment_5_8_2() { return cC2Assignment_5_8_2; }

		//Commands
		public RuleCall getC2CommandsParserRuleCall_5_8_2_0() { return cC2CommandsParserRuleCall_5_8_2_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_5_8_3() { return cLCTerminalRuleCall_5_8_3; }

		//"fi"
		public Keyword getFiKeyword_5_9() { return cFiKeyword_5_9; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expr:
		//	ExprSimple | And | ExprTerm;
		public ParserRule getRule() { return rule; }

		//ExprSimple | And | ExprTerm
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0() { return cExprSimpleParserRuleCall_0; }

		//And
		public RuleCall getAndParserRuleCall_1() { return cAndParserRuleCall_1; }

		//ExprTerm
		public RuleCall getExprTermParserRuleCall_2() { return cExprTermParserRuleCall_2; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cOrParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//And:
		//	Or (LC "and" LC Or)*;
		public ParserRule getRule() { return rule; }

		//Or (LC "and" LC Or)*
		public Group getGroup() { return cGroup; }

		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }

		//(LC "and" LC Or)*
		public Group getGroup_1() { return cGroup_1; }

		//LC
		public RuleCall getLCTerminalRuleCall_1_0() { return cLCTerminalRuleCall_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//LC
		public RuleCall getLCTerminalRuleCall_1_2() { return cLCTerminalRuleCall_1_2; }

		//Or
		public RuleCall getOrParserRuleCall_1_3() { return cOrParserRuleCall_1_3; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cNotParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Or:
		//	Not (LC "or" LC Not)*;
		public ParserRule getRule() { return rule; }

		//Not (LC "or" LC Not)*
		public Group getGroup() { return cGroup; }

		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }

		//(LC "or" LC Not)*
		public Group getGroup_1() { return cGroup_1; }

		//LC
		public RuleCall getLCTerminalRuleCall_1_0() { return cLCTerminalRuleCall_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//LC
		public RuleCall getLCTerminalRuleCall_1_2() { return cLCTerminalRuleCall_1_2; }

		//Not
		public RuleCall getNotParserRuleCall_1_3() { return cNotParserRuleCall_1_3; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cEqParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Not:
		//	("not" LC)* Eq;
		public ParserRule getRule() { return rule; }

		//("not" LC)* Eq
		public Group getGroup() { return cGroup; }

		//("not" LC)*
		public Group getGroup_0() { return cGroup_0; }

		//"not"
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//LC
		public RuleCall getLCTerminalRuleCall_0_1() { return cLCTerminalRuleCall_0_1; }

		//Eq
		public RuleCall getEqParserRuleCall_1() { return cEqParserRuleCall_1; }
	}

	public class EqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Eq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cExprTermParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cLCTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final RuleCall cExprSimpleParserRuleCall_0_4_0 = (RuleCall)cAlternatives_0_4.eContents().get(0);
		private final RuleCall cExprTermParserRuleCall_0_4_1 = (RuleCall)cAlternatives_0_4.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cExprTermParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Eq:
		//	(ExprSimple | ExprTerm) LC? "=?" LC? (ExprSimple | ExprTerm) | "(" (ExprTerm | ExprSimple) ")";
		public ParserRule getRule() { return rule; }

		//(ExprSimple | ExprTerm) LC? "=?" LC? (ExprSimple | ExprTerm) | "(" (ExprTerm | ExprSimple) ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//(ExprSimple | ExprTerm) LC? "=?" LC? (ExprSimple | ExprTerm)
		public Group getGroup_0() { return cGroup_0; }

		//ExprSimple | ExprTerm
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_0_0() { return cExprSimpleParserRuleCall_0_0_0; }

		//ExprTerm
		public RuleCall getExprTermParserRuleCall_0_0_1() { return cExprTermParserRuleCall_0_0_1; }

		//LC?
		public RuleCall getLCTerminalRuleCall_0_1() { return cLCTerminalRuleCall_0_1; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_0_2() { return cEqualsSignQuestionMarkKeyword_0_2; }

		//LC?
		public RuleCall getLCTerminalRuleCall_0_3() { return cLCTerminalRuleCall_0_3; }

		//ExprSimple | ExprTerm
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }

		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_4_0() { return cExprSimpleParserRuleCall_0_4_0; }

		//ExprTerm
		public RuleCall getExprTermParserRuleCall_0_4_1() { return cExprTermParserRuleCall_0_4_1; }

		//"(" (ExprTerm | ExprSimple) ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ExprTerm | ExprSimple
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//ExprTerm
		public RuleCall getExprTermParserRuleCall_1_1_0() { return cExprTermParserRuleCall_1_1_0; }

		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_1_1_1() { return cExprSimpleParserRuleCall_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ExprTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNilKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSYMBOLESTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExprTerm:
		//	"nil" | VARIABLE | SYMBOLES;
		public ParserRule getRule() { return rule; }

		//"nil" | VARIABLE | SYMBOLES
		public Alternatives getAlternatives() { return cAlternatives; }

		//"nil"
		public Keyword getNilKeyword_0() { return cNilKeyword_0; }

		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1() { return cVARIABLETerminalRuleCall_1; }

		//SYMBOLES
		public RuleCall getSYMBOLESTerminalRuleCall_2() { return cSYMBOLESTerminalRuleCall_2; }
	}

	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cConsKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cListKeyword_1_0_0_1 = (Keyword)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cLexprParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cHdKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cTlKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprParserRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExprSimple:
		//	"(" (("cons" | "list") Lexpr | ("hd" | "tl") LC Expr) ")";
		public ParserRule getRule() { return rule; }

		//"(" (("cons" | "list") Lexpr | ("hd" | "tl") LC Expr) ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//("cons" | "list") Lexpr | ("hd" | "tl") LC Expr
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//("cons" | "list") Lexpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"cons" | "list"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//"cons"
		public Keyword getConsKeyword_1_0_0_0() { return cConsKeyword_1_0_0_0; }

		//"list"
		public Keyword getListKeyword_1_0_0_1() { return cListKeyword_1_0_0_1; }

		//Lexpr
		public RuleCall getLexprParserRuleCall_1_0_1() { return cLexprParserRuleCall_1_0_1; }

		//("hd" | "tl") LC Expr
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"hd" | "tl"
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//"hd"
		public Keyword getHdKeyword_1_1_0_0() { return cHdKeyword_1_1_0_0; }

		//"tl"
		public Keyword getTlKeyword_1_1_0_1() { return cTlKeyword_1_1_0_1; }

		//LC
		public RuleCall getLCTerminalRuleCall_1_1_1() { return cLCTerminalRuleCall_1_1_1; }

		//Expr
		public RuleCall getExprParserRuleCall_1_1_2() { return cExprParserRuleCall_1_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class LexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lexpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Lexpr:
		//	(LC Expr)+;
		public ParserRule getRule() { return rule; }

		//(LC Expr)+
		public Group getGroup() { return cGroup; }

		//LC
		public RuleCall getLCTerminalRuleCall_0() { return cLCTerminalRuleCall_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}
	
	
	private ModelElements pModel;
	private FunctionElements pFunction;
	private DefinitonElements pDefiniton;
	private InputElements pInput;
	private OutputElements pOutput;
	private CommandsElements pCommands;
	private VarsElements pVars;
	private ExprsElements pExprs;
	private CommandElements pCommand;
	private ExprElements pExpr;
	private AndElements pAnd;
	private OrElements pOr;
	private NotElements pNot;
	private EqElements pEq;
	private ExprTermElements pExprTerm;
	private ExprSimpleElements pExprSimple;
	private LexprElements pLexpr;
	private TerminalRule tVARIABLE;
	private TerminalRule tSYMBOLES;
	private TerminalRule tLC;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.tl.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(model+=function LC?)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//function:
	//	"function" LC funName=SYMBOLES ":" LC def=Definiton;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Definiton:
	//	"read" LC inputVars=Input LC "%" commandList=Commands LC "%" "write" LC outputVars=Output;
	public DefinitonElements getDefinitonAccess() {
		return (pDefiniton != null) ? pDefiniton : (pDefiniton = new DefinitonElements());
	}
	
	public ParserRule getDefinitonRule() {
		return getDefinitonAccess().getRule();
	}

	//Input:
	//	VARIABLE ("," LC? VARIABLE)*;
	public InputElements getInputAccess() {
		return (pInput != null) ? pInput : (pInput = new InputElements());
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Output:
	//	VARIABLE ("," LC? VARIABLE)*;
	public OutputElements getOutputAccess() {
		return (pOutput != null) ? pOutput : (pOutput = new OutputElements());
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	//Commands:
	//	c+=Command (";" LC? c+=Command)*;
	public CommandsElements getCommandsAccess() {
		return (pCommands != null) ? pCommands : (pCommands = new CommandsElements());
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}

	//Vars:
	//	VARIABLE ("," Vars)?;
	public VarsElements getVarsAccess() {
		return (pVars != null) ? pVars : (pVars = new VarsElements());
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}

	//Exprs:
	//	Expr ("," Exprs)?;
	public ExprsElements getExprsAccess() {
		return (pExprs != null) ? pExprs : (pExprs = new ExprsElements());
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}

	//Command:
	//	{Command} "nop" | varL=Vars LC? ":=" LC? expL=Exprs | nom="while" LC exp=Expr LC "do" LC c1=Commands LC "od" |
	//	nom="for" LC exp=Expr LC "do" LC c1=Commands LC "od" | nom="foreach" LC exp1=Expr LC "in" LC exp2=Expr LC "do" LC
	//	c1=Commands LC "od" | nom="if" LC exp=Expr LC "then" LC c1=Commands LC ("else" LC c2=Commands LC)? "fi";
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//Expr:
	//	ExprSimple | And | ExprTerm;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//And:
	//	Or (LC "and" LC Or)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or:
	//	Not (LC "or" LC Not)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Not:
	//	("not" LC)* Eq;
	public NotElements getNotAccess() {
		return (pNot != null) ? pNot : (pNot = new NotElements());
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//Eq:
	//	(ExprSimple | ExprTerm) LC? "=?" LC? (ExprSimple | ExprTerm) | "(" (ExprTerm | ExprSimple) ")";
	public EqElements getEqAccess() {
		return (pEq != null) ? pEq : (pEq = new EqElements());
	}
	
	public ParserRule getEqRule() {
		return getEqAccess().getRule();
	}

	//ExprTerm:
	//	"nil" | VARIABLE | SYMBOLES;
	public ExprTermElements getExprTermAccess() {
		return (pExprTerm != null) ? pExprTerm : (pExprTerm = new ExprTermElements());
	}
	
	public ParserRule getExprTermRule() {
		return getExprTermAccess().getRule();
	}

	//ExprSimple:
	//	"(" (("cons" | "list") Lexpr | ("hd" | "tl") LC Expr) ")";
	public ExprSimpleElements getExprSimpleAccess() {
		return (pExprSimple != null) ? pExprSimple : (pExprSimple = new ExprSimpleElements());
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}

	//Lexpr:
	//	(LC Expr)+;
	public LexprElements getLexprAccess() {
		return (pLexpr != null) ? pLexpr : (pLexpr = new LexprElements());
	}
	
	public ParserRule getLexprRule() {
		return getLexprAccess().getRule();
	}

	//terminal VARIABLE:
	//	"A".."Z" ("a".."z" | "0".."9" | "A".."Z")*;
	public TerminalRule getVARIABLERule() {
		return (tVARIABLE != null) ? tVARIABLE : (tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VARIABLE"));
	} 

	//terminal SYMBOLES:
	//	"a".."z" ("a".."z" | "0".."9" | "A".."Z")*;
	public TerminalRule getSYMBOLESRule() {
		return (tSYMBOLES != null) ? tSYMBOLES : (tSYMBOLES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYMBOLES"));
	} 

	//terminal LC:
	//	(" " | "\n" | "\t")+;
	public TerminalRule getLCRule() {
		return (tLC != null) ? tLC : (tLC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LC"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
