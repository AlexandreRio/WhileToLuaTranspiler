/*
* generated by Xtext
*/
package org.xtext.tl.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.tl.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.tl.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.tl.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.tl.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
					put(grammarAccess.getEqAccess().getAlternatives(), "rule__Eq__Alternatives");
					put(grammarAccess.getEqAccess().getExprEq1Alternatives_0_0_0(), "rule__Eq__ExprEq1Alternatives_0_0_0");
					put(grammarAccess.getEqAccess().getExprEq2Alternatives_0_4_0(), "rule__Eq__ExprEq2Alternatives_0_4_0");
					put(grammarAccess.getEqAccess().getExpAlternatives_1_1_0(), "rule__Eq__ExpAlternatives_1_1_0");
					put(grammarAccess.getExprTermAccess().getAlternatives(), "rule__ExprTerm__Alternatives");
					put(grammarAccess.getExprSimpleAccess().getAlternatives_1(), "rule__ExprSimple__Alternatives_1");
					put(grammarAccess.getExprSimpleAccess().getMotAlternatives_1_0_0_0(), "rule__ExprSimple__MotAlternatives_1_0_0_0");
					put(grammarAccess.getExprSimpleAccess().getMotAlternatives_1_1_0_0(), "rule__ExprSimple__MotAlternatives_1_1_0_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDefinitonAccess().getGroup(), "rule__Definiton__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
					put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
					put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
					put(grammarAccess.getVarsAccess().getGroup(), "rule__Vars__Group__0");
					put(grammarAccess.getVarsAccess().getGroup_1(), "rule__Vars__Group_1__0");
					put(grammarAccess.getExprsAccess().getGroup(), "rule__Exprs__Group__0");
					put(grammarAccess.getExprsAccess().getGroup_1(), "rule__Exprs__Group_1__0");
					put(grammarAccess.getCommandAccess().getGroup_0(), "rule__Command__Group_0__0");
					put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
					put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
					put(grammarAccess.getCommandAccess().getGroup_3(), "rule__Command__Group_3__0");
					put(grammarAccess.getCommandAccess().getGroup_4(), "rule__Command__Group_4__0");
					put(grammarAccess.getCommandAccess().getGroup_5(), "rule__Command__Group_5__0");
					put(grammarAccess.getCommandAccess().getGroup_5_8(), "rule__Command__Group_5_8__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getNotAccess().getGroup(), "rule__Not__Group__0");
					put(grammarAccess.getNotAccess().getGroup_0(), "rule__Not__Group_0__0");
					put(grammarAccess.getEqAccess().getGroup_0(), "rule__Eq__Group_0__0");
					put(grammarAccess.getEqAccess().getGroup_1(), "rule__Eq__Group_1__0");
					put(grammarAccess.getExprTermAccess().getGroup_0(), "rule__ExprTerm__Group_0__0");
					put(grammarAccess.getExprSimpleAccess().getGroup(), "rule__ExprSimple__Group__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_1_0(), "rule__ExprSimple__Group_1_0__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_1_1(), "rule__ExprSimple__Group_1_1__0");
					put(grammarAccess.getLexprAccess().getGroup(), "rule__Lexpr__Group__0");
					put(grammarAccess.getModelAccess().getModelAssignment_0(), "rule__Model__ModelAssignment_0");
					put(grammarAccess.getFunctionAccess().getFunNameAssignment_2(), "rule__Function__FunNameAssignment_2");
					put(grammarAccess.getFunctionAccess().getDefAssignment_5(), "rule__Function__DefAssignment_5");
					put(grammarAccess.getDefinitonAccess().getInputVarsAssignment_2(), "rule__Definiton__InputVarsAssignment_2");
					put(grammarAccess.getDefinitonAccess().getCommandListAssignment_5(), "rule__Definiton__CommandListAssignment_5");
					put(grammarAccess.getDefinitonAccess().getOutputVarsAssignment_10(), "rule__Definiton__OutputVarsAssignment_10");
					put(grammarAccess.getInputAccess().getVAssignment_0(), "rule__Input__VAssignment_0");
					put(grammarAccess.getInputAccess().getV2Assignment_1_2(), "rule__Input__V2Assignment_1_2");
					put(grammarAccess.getOutputAccess().getVAssignment_0(), "rule__Output__VAssignment_0");
					put(grammarAccess.getOutputAccess().getV2Assignment_1_2(), "rule__Output__V2Assignment_1_2");
					put(grammarAccess.getCommandsAccess().getCAssignment_0(), "rule__Commands__CAssignment_0");
					put(grammarAccess.getCommandsAccess().getCAssignment_1_2(), "rule__Commands__CAssignment_1_2");
					put(grammarAccess.getVarsAccess().getV1Assignment_0(), "rule__Vars__V1Assignment_0");
					put(grammarAccess.getVarsAccess().getV2Assignment_1_1(), "rule__Vars__V2Assignment_1_1");
					put(grammarAccess.getExprsAccess().getExpAssignment_0(), "rule__Exprs__ExpAssignment_0");
					put(grammarAccess.getExprsAccess().getExpLAssignment_1_1(), "rule__Exprs__ExpLAssignment_1_1");
					put(grammarAccess.getCommandAccess().getVarLAssignment_1_0(), "rule__Command__VarLAssignment_1_0");
					put(grammarAccess.getCommandAccess().getExpLAssignment_1_4(), "rule__Command__ExpLAssignment_1_4");
					put(grammarAccess.getCommandAccess().getNomAssignment_2_0(), "rule__Command__NomAssignment_2_0");
					put(grammarAccess.getCommandAccess().getExpAssignment_2_2(), "rule__Command__ExpAssignment_2_2");
					put(grammarAccess.getCommandAccess().getC1Assignment_2_6(), "rule__Command__C1Assignment_2_6");
					put(grammarAccess.getCommandAccess().getNomAssignment_3_0(), "rule__Command__NomAssignment_3_0");
					put(grammarAccess.getCommandAccess().getExpAssignment_3_2(), "rule__Command__ExpAssignment_3_2");
					put(grammarAccess.getCommandAccess().getC1Assignment_3_6(), "rule__Command__C1Assignment_3_6");
					put(grammarAccess.getCommandAccess().getNomAssignment_4_0(), "rule__Command__NomAssignment_4_0");
					put(grammarAccess.getCommandAccess().getExp1Assignment_4_2(), "rule__Command__Exp1Assignment_4_2");
					put(grammarAccess.getCommandAccess().getExp2Assignment_4_6(), "rule__Command__Exp2Assignment_4_6");
					put(grammarAccess.getCommandAccess().getC1Assignment_4_10(), "rule__Command__C1Assignment_4_10");
					put(grammarAccess.getCommandAccess().getNomAssignment_5_0(), "rule__Command__NomAssignment_5_0");
					put(grammarAccess.getCommandAccess().getExpAssignment_5_2(), "rule__Command__ExpAssignment_5_2");
					put(grammarAccess.getCommandAccess().getC1Assignment_5_6(), "rule__Command__C1Assignment_5_6");
					put(grammarAccess.getCommandAccess().getC2Assignment_5_8_2(), "rule__Command__C2Assignment_5_8_2");
					put(grammarAccess.getExprAccess().getExprSimpleAssignment_0(), "rule__Expr__ExprSimpleAssignment_0");
					put(grammarAccess.getExprAccess().getExpEtAssignment_1(), "rule__Expr__ExpEtAssignment_1");
					put(grammarAccess.getExprAccess().getExpTerminaleAssignment_2(), "rule__Expr__ExpTerminaleAssignment_2");
					put(grammarAccess.getAndAccess().getExpOuAssignment_0(), "rule__And__ExpOuAssignment_0");
					put(grammarAccess.getAndAccess().getExpOu2Assignment_1_3(), "rule__And__ExpOu2Assignment_1_3");
					put(grammarAccess.getOrAccess().getExpNonAssignment_0(), "rule__Or__ExpNonAssignment_0");
					put(grammarAccess.getOrAccess().getExpNon2Assignment_1_3(), "rule__Or__ExpNon2Assignment_1_3");
					put(grammarAccess.getNotAccess().getNonAssignment_0_0(), "rule__Not__NonAssignment_0_0");
					put(grammarAccess.getNotAccess().getExpEqAssignment_1(), "rule__Not__ExpEqAssignment_1");
					put(grammarAccess.getEqAccess().getExprEq1Assignment_0_0(), "rule__Eq__ExprEq1Assignment_0_0");
					put(grammarAccess.getEqAccess().getExprEq2Assignment_0_4(), "rule__Eq__ExprEq2Assignment_0_4");
					put(grammarAccess.getEqAccess().getExpAssignment_1_1(), "rule__Eq__ExpAssignment_1_1");
					put(grammarAccess.getExprTermAccess().getTermVarAssignment_1(), "rule__ExprTerm__TermVarAssignment_1");
					put(grammarAccess.getExprTermAccess().getTermSymAssignment_2(), "rule__ExprTerm__TermSymAssignment_2");
					put(grammarAccess.getExprSimpleAccess().getMotAssignment_1_0_0(), "rule__ExprSimple__MotAssignment_1_0_0");
					put(grammarAccess.getExprSimpleAccess().getLexprAssignment_1_0_1(), "rule__ExprSimple__LexprAssignment_1_0_1");
					put(grammarAccess.getExprSimpleAccess().getMotAssignment_1_1_0(), "rule__ExprSimple__MotAssignment_1_1_0");
					put(grammarAccess.getExprSimpleAccess().getExprAssignment_1_1_2(), "rule__ExprSimple__ExprAssignment_1_1_2");
					put(grammarAccess.getLexprAccess().getExpAssignment_1(), "rule__Lexpr__ExpAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.tl.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.tl.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
